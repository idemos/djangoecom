from decimal import Decimal
from rest_framework import serializers
from .models import Category, Product


class CategorySerializer(serializers.Serializer):
	id = serializers.IntegerField()
	name = serializers.CharField(max_length=255)
	position = serializers.IntegerField()

class ProductCategorySerializer(serializers.Serializer):
	id = serializers.IntegerField()
	name = serializers.CharField(max_length=255)
	unit_price = serializers.DecimalField(max_digits=6,decimal_places=2)
	unit = serializers.DecimalField(max_digits=6,decimal_places=2, source='unit_price')
	unit_price_taxed = serializers.SerializerMethodField(method_name='calculate_tax')
	category = CategorySerializer()

	def calculate_tax(self, product: Product):
		return product.unit_price * Decimal(1.1)

class ProductSerializer(serializers.Serializer):
	id = serializers.IntegerField()
	name = serializers.CharField(max_length=255)
	unit_price = serializers.DecimalField(max_digits=6,decimal_places=2)
	unit = serializers.DecimalField(max_digits=6,decimal_places=2, source='unit_price')
	unit_price_taxed = serializers.SerializerMethodField(method_name='calculate_tax')
	category = serializers.PrimaryKeyRelatedField(
		queryset=Category.objects.all()
	)

	def calculate_tax(self, product: Product):
		return product.unit_price * Decimal(1.1)


# class ProductSerializer(serializers.ModelSerializer):
# 	class Meta:
# 		model = Product
# 		fields = ['id','name','unit_price','category']

